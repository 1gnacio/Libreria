<div class="modal fade" data-backdrop="static" data-keyboard="false" id="confirmacionEliminarModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ejemploModalLabel">
                    Confirmar eliminacion
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmacionCambiada(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ¿Estas seguro de querer eliminar este elemento?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => OnConfirmacionCambiada(false)">
                    Cancelar
                </button>
                @if (inicioProceso)
                {
                    <button type="button" class="btn btn-danger">
                        <i class="fa fa-spin fa-spinner"></i> Procesando...
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="() => OnConfirmacionCambiada(true)">
                        Eliminar
                    </button>
                }
                
            </div>
        </div>
    </div>
</div>
@code {
    public bool inicioProceso { get; set; } = false;
    [Parameter]
    public EventCallback<bool> ConfirmacionChanged { get; set; }
    [Parameter]
    public bool estaProcesandoComponentePadre { get; set; }

    protected override void OnParametersSet()
    {
        inicioProceso = estaProcesandoComponentePadre;
    }

    protected async Task OnConfirmacionCambiada(bool value)
    {
        if (value)
        {
            inicioProceso = true;
        }
        await ConfirmacionChanged.InvokeAsync(value);
    }
}

@page "/tienda/libro-detalles/{Id:int}"
@inject IJSRuntime jsRuntime
@inject ILibroService LibroService
@inject IStripePagoService stripePagoService
@inject ILibroPedidosDetalleService libroPedidosDetalleService
@inject ILocalStorageService localStorage
@using Microsoft.AspNetCore.Authorization 
@attribute [Authorize(Roles = SD.RoleCliente)]

@if (LibroCompra?.PedidosDetalles?.LibroDto?.LibroImagen == null)
{
    <div class="spinner"></div>
}
else
{

    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2 my-3 " style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #87bdd8">
            <div class="row px-2 text-primary border-bottom">
                <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Libro Seleccionado</p></div>
                <div class="col-4 p-0"><a href="tienda/libros" class="btn btn-secondary btn-block">Volver al Catalogo</a></div>
            </div>

            <div class="row">
                <div class="col-6">
                    <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                            <ol class="carousel-indicators">
                                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                            </ol>
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100" src="images/imagen1.png" alt="First slide">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <span class="float-right pt-4">
                        <span class="float-right">Autor : @LibroCompra.PedidosDetalles.LibroDto.Autor </span><br />
                        <h4 class="text-primary font-weight-bold pt-5 pl-5">USD <span style="border-bottom:1px solid #ff6a00"> @LibroCompra.PedidosDetalles.LibroDto.PrecioRegular.ToString("#,#.00#;(#,#.00#)")</span></h4>
                    </span>
                </div>
            </div>
            <div class="row p-2">
                <div class="col-12">
                    <p class="card-title text-primary" style="font-size:xx-large">@LibroCompra.PedidosDetalles.LibroDto.Nombre</p>
                    <p class="card-text" style="font-size:large">
                        @((MarkupString)LibroCompra.PedidosDetalles.LibroDto.Detalles)
                    </p>
                </div>

            </div>
        </div>

        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #87bdd8;">
            <EditForm Model="LibroCompra" class="container" OnValidSubmit="HandleAdquirir">


                <div class="row px-2 text-primary border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Ingresa tus Datos</p></div></div>

                <div class="form-group pt-2">
                    <label class="text-primary">Nombre</label>
                    <InputText @bind-Value="LibroCompra.PedidosDetalles.Nombre" type="text" class="form-control" />
                </div>
                <div class="form-group pt-2">
                    <label class="text-primary">Telefono</label>
                    <InputText @bind-Value="LibroCompra.PedidosDetalles.Phone" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-primary">Email</label>
                    <InputText @bind-Value="LibroCompra.PedidosDetalles.Email" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary form-control">Adquirir Ahora</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
}
@code {
    [Parameter]
    public int? Id { get; set; }

    public LibroCompraVM LibroCompra { get; set; } = new LibroCompraVM();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LibroCompra.PedidosDetalles = new LibroPedidosDetalleDto();

            if(Id != null)
            {
                LibroCompra.PedidosDetalles.LibroDto = await LibroService.GetLibroDetalles(Id.Value);
            }

            if (await localStorage.GetItemAsync<UsuarioDto>(SD.Local_UserDetails) != null)
            {
                var userInfo = await localStorage.GetItemAsync<UsuarioDto>(SD.Local_UserDetails);

                LibroCompra.PedidosDetalles.UserId = userInfo.Id;
                LibroCompra.PedidosDetalles.Nombre = userInfo.Name;
                LibroCompra.PedidosDetalles.Email = userInfo.Email;
                LibroCompra.PedidosDetalles.Phone = userInfo.PhoneNo;

            }
        }
        catch (Exception e)
        {

            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task HandleAdquirir()
    {
        if (!await HandleValidacion())
        {
            return;
        }

        try
        {
            var pagoDto = new StripePagoDto()
            {
                Monto = Convert.ToInt32(LibroCompra.PedidosDetalles.LibroDto.PrecioRegular * 100),
                ProductoNombre = LibroCompra.PedidosDetalles.LibroDto.Nombre,
                ReturnUrl = "/tienda/libro-detalles/" + Id
            };

            var resultado = await stripePagoService.Checkout(pagoDto);

            LibroCompra.PedidosDetalles.StripeSessionId = resultado.Data.ToString();
            LibroCompra.PedidosDetalles.LibroId = LibroCompra.PedidosDetalles.LibroDto.Id;
            LibroCompra.PedidosDetalles.CostoTotal = LibroCompra.PedidosDetalles.LibroDto.PrecioRegular;

            var libroPedidosDetalleSaved = await libroPedidosDetalleService.SaveLibroPedidosDetalle(LibroCompra.PedidosDetalles);

            await localStorage.SetItemAsync(SD.Local_LibroPedidoDetalles, libroPedidosDetalleSaved);

            await jsRuntime.InvokeVoidAsync("redirectToCheckout", resultado.Data.ToString());
        }
        catch (Exception e)
        {

            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task<bool> HandleValidacion()
    {
        if (string.IsNullOrEmpty(LibroCompra.PedidosDetalles.Nombre))
        {
            await jsRuntime.ToastrError("El nombre no puede estar vacío");
            return false;
        }

        if (string.IsNullOrEmpty(LibroCompra.PedidosDetalles.Phone))
        {
            await jsRuntime.ToastrError("El teléfono no puede estar vacío");
            return false;
        }

        if (string.IsNullOrEmpty(LibroCompra.PedidosDetalles.Email))
        {
            await jsRuntime.ToastrError("El email no puede estar vacío");
            return false;
        }

        return true;
    }
}
